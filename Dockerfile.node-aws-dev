ARG ALPINE_VERSION=3.18

## AWS: Building aws-cli
# Even though alpine 3.18 have native aws-cli package, the self-built package have lower size and ensure latest version.
FROM python:3.11-alpine${ALPINE_VERSION} as builder

RUN apk add --update-cache --no-cache \
  unzip \
  groff \
  build-base \
  libffi-dev \
  cmake \
  jq

WORKDIR /aws-cli

RUN wget $(wget https://api.github.com/repos/aws/aws-cli/tags\?per_page\=1 -qO- | jq -r '.[0].tarball_url') -qO- | \
  tar -xz --strip-components=1 --exclude=.changes --exclude=.github --exclude=tests --exclude=proposals

RUN python -m venv venv
RUN . venv/bin/activate
RUN scripts/installers/make-exe
RUN unzip -q dist/awscli-exe.zip
RUN aws/install --bin-dir /aws-cli-bin
RUN /aws-cli-bin/aws --version

# reduce image size: remove autocomplete and examples
RUN rm -rf /usr/local/aws-cli/v2/current/dist/aws_completer /usr/local/aws-cli/v2/current/dist/awscli/data/ac.index /usr/local/aws-cli/v2/current/dist/awscli/examples
RUN find /usr/local/aws-cli/v2/current/dist/awscli/data -name completions-1*.json -delete
RUN find /usr/local/aws-cli/v2/current/dist/awscli/botocore/data -name examples-1.json -delete
##


FROM node:lts-alpine${ALPINE_VERSION}
LABEL maintainer="dangquoctrung123@gmail.com"

ARG PNPM_VERSION=latest

RUN apk add --no-cache \
  gcompat libstdc++ zip jq sudo

## AWS: Copy built aws-cli
COPY --from=builder /usr/local/aws-cli/ /usr/local/aws-cli/
COPY --from=builder /aws-cli-bin/ /usr/local/bin/
##

## Install PNPM
ENV PNPM_HOME=/root/.local/share/pnpm
ENV PATH=$PNPM_HOME:$PATH
RUN touch /etc/profile.d/pnpmPath.sh && \
  echo "export PNPM_HOME=$PNPM_HOME" >> /etc/profile.d/pnpmPath.sh && \
  echo "export PATH=$PNPM_HOME:$PATH" >> /etc/profile.d/pnpmPath.sh && \
  source /etc/profile.d/pnpmPath.sh
# This will make the command re-run if theres a new pnpm version (prevents docker cache installing an older version)
ADD "https://api.github.com/repos/pnpm/pnpm/tags?per_page=1" latest_commit
RUN npx pnpm i -g pnpm@latest
RUN pnpm i -g @antfu/ni && \
  touch ~/.nirc && \
  echo 'defaultAgent=pnpm' >> ~/.nirc && \
  echo 'globalAgent=pnpm' >> ~/.nirc
##

## Install dev components (should be last in script)
RUN apk add --no-cache git less zsh curl

# Adding a simple command to change git remote connection from/to ssh/https
RUN touch /etc/profile.d/gitRemoteChanger.sh && \
  echo $'alias git-ssh=\'git remote set-url origin \"\$\(git remote get-url origin \| sed -E \'\\\'\'s,\^https://\(\[\^/\]\*\)/\(.\*\)\$,git@\\1:\\2,\'\\\'\'\)\"\' >> /etc/profile.d/gitRemoteChanger.sh' && \
  echo $'alias git-https=\'git remote set-url origin \"\$\(git remote get-url origin \| sed -E \'\\\'\'s,\^git@\(\[\^:\]\*\):/\*\(.\*\)\$,https://\\1/\\2,\'\\\'\'\)\"\' >> /etc/profile.d/gitRemoteChanger.sh' && \
  source /etc/profile.d/gitRemoteChanger.sh

RUN sh -c "$(wget -qO- https://github.com/deluan/zsh-in-docker/releases/download/v1.1.5/zsh-in-docker.sh)" -- \
  -x \
  -t https://github.com/spaceship-prompt/spaceship-prompt \
  -a 'SPACESHIP_USER_SHOW=false' \
  -a 'SPACESHIP_DIR_TRUNC_REPO=false' \
  -p command-not-found \
  -p git \
  -p history-substring-search \
  -p z \
  -p https://github.com/zsh-users/zsh-autosuggestions \
  -p https://github.com/zsh-users/zsh-completions \
  -p https://github.com/zsh-users/zsh-syntax-highlighting

# Clear the ENTRYPOINT from node image
ENTRYPOINT []
# Set zsh as the default shell
RUN sed -i 's/\/root:\/bin\/ash/\/root:\/bin\/zsh/g' /etc/passwd
CMD ["/bin/zsh", "--login"]
##
